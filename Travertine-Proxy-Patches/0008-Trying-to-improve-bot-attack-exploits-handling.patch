From 2a7f73eefe078514dbb475f81dd46569d897d7f0 Mon Sep 17 00:00:00 2001
From: Mariaum <me@mariaum.com>
Date: Fri, 4 Oct 2019 21:23:16 -0300
Subject: [PATCH] Trying to improve bot attack exploits handling.


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java b/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
index 6c0ef4df..e3848e09 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
@@ -12,4 +12,16 @@ public class BadPacketException extends RuntimeException
     {
         super( message, cause );
     }
+
+    @Override
+    public Throwable initCause(Throwable cause)
+    {
+        return this;
+    }
+
+    @Override
+    public Throwable fillInStackTrace()
+    {
+        return this;
+    }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 01997098..784000e3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -71,7 +71,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
 
             out.add( new PacketWrapper( packet, slice ) );
             slice = null;
-        } catch (BadPacketException | IndexOutOfBoundsException e) {
+        } catch (IndexOutOfBoundsException e) {
             final String packetTypeStr;
             if (packetTypeInfo instanceof Integer) {
                 packetTypeStr = "id " + Integer.toHexString((Integer) packetTypeInfo);
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index b229b2bd..e5e5347c 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -25,11 +25,7 @@ import net.md_5.bungee.BungeeServerInfo;
 import net.md_5.bungee.EncryptionUtil;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.Util;
-import net.md_5.bungee.api.AbstractReconnectHandler;
-import net.md_5.bungee.api.Callback;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.Favicon;
-import net.md_5.bungee.api.ServerPing;
+import net.md_5.bungee.api.*;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
 import net.md_5.bungee.api.config.ListenerInfo;
@@ -141,7 +137,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
+            this.ch.close();
+            ProxyServer.getInstance().getLogger().log( Level.WARNING, this + " - received invalid login packet" );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index a66099fc..43bd3856 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -130,11 +130,11 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                 if ( cause instanceof ReadTimeoutException )
                 {
                     ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - read timed out", handler );
-                } else if ( cause instanceof DecoderException && cause.getCause() instanceof BadPacketException )
+                } else if ( cause instanceof BadPacketException )
                 {
-                    ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - bad packet ID, are mods in use!? {1}", new Object[]
+                    ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - bad packet: {1}", new Object[]
                     {
-                        handler, cause.getCause().getMessage()
+                        handler, cause.getMessage()
                     } );
                 } else if ( cause instanceof DecoderException && cause.getCause() instanceof OverflowPacketException )
                 {
-- 
2.17.1

